<?php

namespace app\index\controller;

use think\Controller;
use think\Db;
use think\Request;

class Orders extends Controller
{
    protected function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        checkJWT();
    }

    /**
     * 显示资源列表
     *
     * @return \think\Response
     */
    public function index()
    {
        //
    }

    /**
     * 显示创建资源表单页.
     *
     * @return \think\Response
     */
    public function create()
    {
        //
    }

    /**
     * 保存新建的资源
     *
     * @param  \think\Request  $request
     * @return \think\Response
     */
    public function save(Request $request)
    {
        //
/*
        *
        * 产生订单 ->order (uid,ordernum,price,)
        *
        * 购物车
        *
        *  订单商品销量
        * */
        $uid = $this->request->id;
        $ordernum = time() . mt_rand(1000,9999);
        Db::startTrans();
        $cart = Db::table('cart')->where(['uid'=>$uid])->find();
        $price = $cart['price'];
        $orders = model('Ordermodel');
//        插入到订单页
        $orderResult = $orders->inserts(['uid'=>$uid,'ordernum'=>$ordernum,'price'=>$price]);
//        读取购物车表二的信息提交到订单
        $cartExtra=Db::table('cart_extra')->field('gid,num')->where(['uid'=>$uid])->select();
        for($i=0;$i<count($cartExtra);$i++){
            $cartExtra[$i]['uid']=$uid;
            $cartExtra[$i]['ordernum']=$ordernum;
        }
        $orderExtra=Db::table('orders_extra')->where(['uid'=>$uid])->insertAll($cartExtra);
//        删除购物车添加到订单表的信息
        $cartDelete=Db::table('cart_extra')->where(['uid'=>$uid,'state'=>1])->delete();
//        将购物车表一的内容清空，但不必删除用户的购物车
        $cartUpdate=Db::table('cart')->where(['uid'=>$uid])->update(['total'=>0,'price'=>0]);
        if($orderResult&&$orderExtra&&$cartDelete&&$cartUpdate){
            Db::commit();
            return json([
                'code'=>config('code.success'),
                'msg'=>'加入订单成功',
                'data'=>$ordernum
            ]);
        }else{
            Db::rollback();
            return json([
                'code'=>config('code.fail'),
                'msg'=>'加入订单失败',
            ]);
        }
    }

    /**
     * 显示指定的资源
     *
     * @param  int  $id
     * @return \think\Response
     */
    public function read($id)
    {
        //
        // 订单 -> 商品
        $uid = $this->request->id;
        $order = Db::table('orders')->field('price,remarks,address')->where(['uid'=>$uid,'ordernum'=>$id])->find();

        $goods = Db::table('orders_extra')->alias('o')
            ->field('o.gid,o.num,goods.gname,goods.ename,goods.gthumb,goods.gtype,goods.price,goods.gstock')
            ->join('goods','o.gid=goods.gid')
            ->where(['ordernum'=>$id])
            ->select();
        $order['goods'] = $goods;

        if($goods && $order){
            return  json([
                'code'=>config('code.success'),
                'msg'=>'订单获取成功',
                'data'=>$order
            ]);
        }else{
            return  json([
                'code'=>config('code.fail'),
                'msg'=>'订单获取失败'
            ]);
        }
    }

    /**
     * 显示编辑资源表单页.
     *
     * @param  int  $id
     * @return \think\Response
     */
    public function edit($id)
    {
        //
    }

    /**
     * 保存更新的资源
     *
     * @param  \think\Request  $request
     * @param  int  $id
     * @return \think\Response
     */
    public function update(Request $request, $id)
    {
        //
    }

    /**
     * 删除指定资源
     *
     * @param  int  $id
     * @return \think\Response
     */
    public function delete($id)
    {
        //
    }
}
